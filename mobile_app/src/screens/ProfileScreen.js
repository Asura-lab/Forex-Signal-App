import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  TextInput,
  Switch,
  Modal,
  ActivityIndicator,
  Linking,
  Platform,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import { Ionicons } from "@expo/vector-icons";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useTheme } from "../context/ThemeContext";
import { getColors } from "../config/theme";
import { logoutUser } from "../services/api";
import { API_ENDPOINTS } from "../config/api";

/**
 * Profile Screen - –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª
 */
const ProfileScreen = ({ navigation }) => {
  const { isDark, themeMode, setTheme } = useTheme();
  const colors = getColors(isDark);
  const styles = createStyles(colors);

  const [userData, setUserData] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [notifications, setNotifications] = useState(true);
  const [loading, setLoading] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showDocumentModal, setShowDocumentModal] = useState(false);
  const [currentDocument, setCurrentDocument] = useState(null);
  const [stats, setStats] = useState({
    daysUsed: 0,
    signalsReceived: 0,
    lastActive: null,
  });

  useEffect(() => {
    loadUserData();
    loadSettings();
    loadStats();
  }, []);

  const loadUserData = async () => {
    try {
      const data = await AsyncStorage.getItem("userData");
      if (data) {
        const parsed = JSON.parse(data);
        setUserData(parsed);
        setName(parsed.name);
        setEmail(parsed.email);
      }
    } catch (error) {
      console.error("Load user data error:", error);
    }
  };

  const loadSettings = async () => {
    try {
      const savedNotifications = await AsyncStorage.getItem(
        "@notification_settings"
      );

      if (savedNotifications !== null) {
        setNotifications(JSON.parse(savedNotifications));
      }
    } catch (error) {
      console.error("Load settings error:", error);
    }
  };

  const loadStats = async () => {
    try {
      const createdAt = await AsyncStorage.getItem("@user_created_at");
      if (createdAt) {
        const daysDiff = Math.floor(
          (Date.now() - new Date(createdAt).getTime()) / (1000 * 60 * 60 * 24)
        );
        setStats((prev) => ({
          ...prev,
          daysUsed: daysDiff,
          lastActive: new Date().toLocaleDateString("mn-MN"),
        }));
      }
    } catch (error) {
      console.error("Load stats error:", error);
    }
  };

  const handleSave = async () => {
    if (!name.trim()) {
      Alert.alert("–ê–ª–¥–∞–∞", "–ù—ç—Ä —Ö–æ–æ—Å–æ–Ω –±–∞–π–∂ –±–æ–ª–æ—Ö–≥“Ø–π");
      return;
    }

    setLoading(true);
    try {
      const token = await getAuthToken();

      const response = await fetch(API_ENDPOINTS.UPDATE, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ name }),
      });

      const data = await response.json();

      if (data.success) {
        // Update local storage
        const updatedUser = { ...userData, name };
        await AsyncStorage.setItem("@user_data", JSON.stringify(updatedUser));
        setUserData(updatedUser);

        Alert.alert("–ê–º–∂–∏–ª—Ç—Ç–∞–π", "–¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç", [
          { text: "OK", onPress: () => setEditMode(false) },
        ]);
      } else {
        Alert.alert("–ê–ª–¥–∞–∞", data.error || "–ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    } catch (error) {
      Alert.alert("–ê–ª–¥–∞–∞", "–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞");
      console.error("Update error:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleChangePassword = () => {
    setShowPasswordModal(true);
  };

  const handlePasswordChange = async () => {
    if (!oldPassword || !newPassword || !confirmPassword) {
      Alert.alert("–ê–ª–¥–∞–∞", "–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—ã–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø");
      return;
    }

    if (newPassword.length < 6) {
      Alert.alert("–ê–ª–¥–∞–∞", "–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ –¥–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π");
      return;
    }

    if (newPassword !== confirmPassword) {
      Alert.alert("–ê–ª–¥–∞–∞", "–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞");
      return;
    }

    setLoading(true);
    try {
      const token = await getAuthToken();

      const response = await fetch(API_ENDPOINTS.CHANGE_PASSWORD, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          oldPassword,
          newPassword,
        }),
      });

      const data = await response.json();

      if (data.success) {
        Alert.alert("–ê–º–∂–∏–ª—Ç—Ç–∞–π", "–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ", [
          {
            text: "OK",
            onPress: () => {
              setShowPasswordModal(false);
              setOldPassword("");
              setNewPassword("");
              setConfirmPassword("");
            },
          },
        ]);
      } else {
        Alert.alert("–ê–ª–¥–∞–∞", data.error || "–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö–æ–æ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    } catch (error) {
      Alert.alert("–ê–ª–¥–∞–∞", "–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞");
      console.error("Password change error:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleNotificationToggle = async (value) => {
    setNotifications(value);
    try {
      await AsyncStorage.setItem(
        "@notification_settings",
        JSON.stringify(value)
      );
    } catch (error) {
      console.error("Save notification settings error:", error);
    }
  };

  const handleDarkModeToggle = async (value) => {
    // 'light', 'dark', 'auto'
    const newMode =
      value === "light" ? "dark" : value === "dark" ? "auto" : "light";
    setTheme(newMode);
  };

  const handleLogout = () => {
    Alert.alert("–ì–∞—Ä–∞—Ö", "–¢–∞ —Å–∏—Å—Ç–µ–º—ç—ç—Å –≥–∞—Ä–∞—Ö–¥–∞–∞ –∏—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞ —É—É?", [
      {
        text: "“Æ–≥“Ø–π",
        style: "cancel",
      },
      {
        text: "–¢–∏–π–º",
        onPress: async () => {
          await logoutUser();
          navigation.reset({
            index: 0,
            routes: [{ name: "Login" }],
          });
        },
      },
    ]);
  };

  // Open document modal
  const openDocument = (docType) => {
    const documents = {
      help: {
        title: "–¢—É—Å–ª–∞–º–∂",
        content: `üöÄ –§–æ—Ä–µ–∫—Å –°–∏–≥–Ω–∞–ª –ê–ø–ø

–≠–Ω—ç –∞–ø–ø –Ω—å Hidden Markov Model (HMM) –º–∞—à–∏–Ω —Å—É—Ä–≥–∞–ª—Ç –∞—à–∏–≥–ª–∞–Ω —Ñ–æ—Ä–µ–∫—Å –≤–∞–ª—é—Ç—ã–Ω —Ö–∞–Ω—à–∏–π–Ω —Ö”©–¥”©–ª–≥”©”©–Ω–∏–π–≥ —Ç–∞–∞–º–∞–≥–ª–∞—Ö –±–æ–ª–æ–º–∂ –æ–ª–≥–æ–¥–æ–≥.

üìä “Æ–Ω–¥—Å—ç–Ω —Ñ—É–Ω–∫—Ü“Ø“Ø–¥:
‚Ä¢ 6 –≤–∞–ª—é—Ç—ã–Ω —Ö–æ—Å (EUR/USD, GBP/USD, USD/CAD, USD/CHF, USD/JPY, XAU/USD)
‚Ä¢ 5 —Ç”©—Ä–ª–∏–π–Ω —Å–∏–≥–Ω–∞–ª (STRONG BUY, BUY, NEUTRAL, SELL, STRONG SELL)
‚Ä¢ Real-time –º–∞–≥–∞–¥–ª–∞–ª
‚Ä¢ ”®–¥—Ä–∏–π–Ω —Ç–æ–π–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫

‚ö†Ô∏è –ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞:
–≠–Ω—ç –∞–ø–ø –Ω—å –∑”©–≤—Ö”©–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç—Ç–∞–π –±”©–≥”©”©–¥ —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω –∑”©–≤–ª”©–≥”©”© –±–∏—à. –ë“Ø—Ö –∞—Ä–∏–ª–∂–∞–∞–Ω—ã —à–∏–π–¥–≤—ç—Ä —Ç–∞–Ω—ã —Ö—É–≤–∏–π–Ω —Ö–∞—Ä–∏—É—Ü–ª–∞–≥–∞ —é–º.

üìû –•–æ–ª–±–æ–æ –±–∞—Ä–∏—Ö:
‚Ä¢ Email: support@predictrix.com
‚Ä¢ GitHub: github.com/Asura-lab/Predictrix`,
      },
      terms: {
        title: "“Æ–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü”©–ª",
        content: `üìã “Æ–ô–õ–ß–ò–õ–ì–≠–≠–ù–ò–ô –ù”®–•–¶”®–õ

1. –•“Æ–õ–≠–≠–ù –ó”®–í–®”®”®–†”®–•
–ê–ø–ø-–≥ –∞—à–∏–≥–ª–∞–∂ —ç—Ö–ª—ç—Ö–¥—ç—ç —Ç–∞ —ç–¥–≥—ç—ç—Ä “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü”©–ª—Ç—ç–π –±“Ø—Ä—ç–Ω —Ç–∞–Ω–∏–ª—Ü–∞–∂, —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞.

2. “Æ–ô–õ–ß–ò–õ–ì–≠–≠–ù–ò–ô –¢–û–î–û–†–•–û–ô–õ–û–õ–¢
‚Ä¢ HMM –∞—à–∏–≥–ª–∞–Ω —Ñ–æ—Ä–µ–∫—Å –∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω —á–∏–≥ —Ö–∞–Ω–¥–ª–∞–≥—ã–≥ —Ç–∞–∞–º–∞–≥–ª–∞—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö
‚Ä¢ –í–∞–ª—é—Ç—ã–Ω —Ö–æ—Å—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Ä—É—É–ª–∞—Ö

‚ö†Ô∏è –ë–ò–î –°–ê–ù–ê–õ, –ó”®–í–õ”®–ú–ñ ”®–ì–î”®–ì–ì“Æ–ô
–ú–∞–Ω–∞–π –∞–ø–ø –Ω—å –∑”©–≤—Ö”©–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç—Ç–∞–π –±”©–≥”©”©–¥ —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω –∑”©–≤–ª”©–≥”©”© –±–∏—à.

3. –≠–†–°–î–≠–õ–ò–ô–ù –ê–ù–•–ê–ê–†–£–£–õ–ì–ê
‚Ä¢ –§–æ—Ä–µ–∫—Å –∑–∞—Ö –∑—ç—ç–ª –º–∞—à ”©–Ω–¥”©—Ä —ç—Ä—Å–¥—ç–ª—Ç—ç–π
‚Ä¢ –¢–∞–∞–º–∞–≥–ª–∞–ª 100% “Ø–Ω—ç–Ω –∑”©–≤ –±–∞–π—Ö –±–∞—Ç–∞–ª–≥–∞–∞–≥“Ø–π
‚Ä¢ ”®–Ω–≥”©—Ä—Å”©–Ω “Ø—Ä –¥“Ø–Ω –∏—Ä—ç—ç–¥“Ø–π–Ω –∞–º–∂–∏–ª—Ç—ã–≥ –±–∞—Ç–ª–∞—Ö–≥“Ø–π
‚Ä¢ HMM –∑–∞–≥–≤–∞—Ä –Ω—å –∞–ª–¥–∞–∞ –≥–∞—Ä—á –±–æ–ª–Ω–æ

4. –•–≠–†–≠–ì–õ–≠–ì–ß–ò–ô–ù –•–ê–†–ò–£–¶–õ–ê–ì–ê
‚Ä¢ –ë“Ø—Ä—Ç–≥—ç–ª–∏–π–Ω –º—ç–¥—ç—ç–ª–ª—ç—ç “Ø–Ω—ç–Ω –∑”©–≤ ”©–≥”©—Ö
‚Ä¢ –ù—É—É—Ü “Ø–≥—ç—ç –Ω—É—É—Ü–ª–∞—Ö
‚Ä¢ ”®”©—Ä–∏–π–Ω —Ö”©—Ä”©–Ω–≥”© –æ—Ä—É—É–ª–∞–ª—Ç—ã–Ω —à–∏–π–¥–≤—ç—Ä ”©”©—Ä”©”© –≥–∞—Ä–≥–∞—Ö

5. –•–û–†–ò–û–¢–û–ô “Æ–ô–õ–î–õ“Æ“Æ–î
‚ùå –°–∏—Å—Ç–µ–º–∏–π–≥ —Ö–∞–∫–µ—Ä–¥–∞—Ö
‚ùå –ë—É—Å–∞–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥–∞–Ω—Å —Ä—É—É –Ω—ç–≤—Ç—Ä—ç—Ö
‚ùå –ê–≤—Ç–æ–º–∞—Ç–∂—É—É–ª—Å–∞–Ω —Å–∏—Å—Ç–µ–º –∞—à–∏–≥–ª–∞—Ö
‚ùå –ê–ø–ø-—ã–Ω –∫–æ–¥ —Ö—É—É–ª–∞—Ö

6. –•–ê–†–ò–£–¶–õ–ê–ì–´–ù –•–Ø–ó–ì–ê–ê–†–õ–ê–õ–¢
–ë–∏–¥ –¥–∞—Ä–∞–∞—Ö –∑“Ø–π–ª–¥ —Ö–∞—Ä–∏—É—Ü–ª–∞–≥–∞ —Ö“Ø–ª—ç—ç—Ö–≥“Ø–π:
‚Ä¢ –¢–∞–Ω—ã –∞—Ä–∏–ª–∂–∞–∞–Ω—ã –∞–ª–¥–∞–≥–¥–∞–ª
‚Ä¢ –ê–ø–ø-—ã–Ω –∞–ª–¥–∞–∞, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω —Å–∞–∞—Ç–∞–ª
‚Ä¢ –ú—ç–¥—ç—ç–ª–ª–∏–π–Ω –∞–ª–¥–∞–∞, —Ö–æ—Ü—Ä–æ–≥–¥–æ–ª

–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π: docs/TERMS_OF_SERVICE.md`,
      },
      privacy: {
        title: "–ù—É—É—Ü–ª–∞–ª—ã–Ω –±–æ–¥–ª–æ–≥–æ",
        content: `üîí –ù–£–£–¶–õ–ê–õ–´–ù –ë–û–î–õ–û–ì–û

1. –¶–£–ì–õ–£–£–õ–ê–• –ú–≠–î–≠–≠–õ–≠–õ

‚úÖ –ë–∏–¥ —Ü—É–≥–ª—É—É–ª–¥–∞–≥:
‚Ä¢ –ù—ç—Ä, –∏–º—ç–π–ª —Ö–∞—è–≥
‚Ä¢ –ù—É—É—Ü “Ø–≥ (hash —Ö—ç–ª–±—ç—Ä—ç—ç—Ä)
‚Ä¢ –¢”©—Ö”©”©—Ä”©–º–∂–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
‚Ä¢ –ê–ø–ø –∞—à–∏–≥–ª–∞–ª—Ç—ã–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫

‚ùå –ë–∏–¥ —Ü—É–≥–ª—É—É–ª–¥–∞–≥–≥“Ø–π:
‚Ä¢ –°–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω –¥–∞–Ω—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª
‚Ä¢ –ö—Ä–µ–¥–∏—Ç –∫–∞—Ä—Ç
‚Ä¢ –ê—Ä–∏–ª–∂–∞–∞–Ω—ã —Ç“Ø“Ø—Ö
‚Ä¢ –£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä
‚Ä¢ GPS –±–∞–π—Ä—à–∏–ª

2. –ú–≠–î–≠–≠–õ–≠–õ –ê–®–ò–ì–õ–ê–•

–ó–æ—Ä–∏—É–ª–∞–ª—Ç:
‚Ä¢ “Æ–π–ª—á–∏–ª–≥—ç—ç “Ø–∑“Ø“Ø–ª—ç—Ö (–Ω—ç–≤—Ç—Ä—ç—Ö, –ø—Ä–æ—Ñ–∞–π–ª)
‚Ä¢ –ê–ø–ø —Å–∞–π–∂—Ä—É—É–ª–∞—Ö
‚Ä¢ –•—ç—Ä—ç–≥–ª—ç–≥—á—Ç—ç–π —Ö–∞—Ä–∏–ª—Ü–∞—Ö
‚Ä¢ –ê—é—É–ª–≥“Ø–π –±–∞–π–¥–∞–ª

3. –•–ê–î–ì–ê–õ–ê–• –ë–ê–ô–†–®–ò–õ

‚Ä¢ MongoDB Atlas (AWS, –ê–∑–∏-–ù–æ–º—Ö–æ–Ω –¥–∞–ª–∞–π)
‚Ä¢ –£—Ç–∞—Å –¥—ç—ç—Ä encrypted (AsyncStorage)
‚Ä¢ Backup: 30 —Ö–æ–Ω–æ–≥

4. –•–ê–ú–ì–ê–ê–õ–ê–õ–¢

üîê –¢–µ—Ö–Ω–∏–∫–∏–π–Ω:
‚Ä¢ HTTPS/TLS encryption
‚Ä¢ bcrypt password hashing
‚Ä¢ JWT —Ç–æ–∫–µ–Ω (7 —Ö–æ–Ω–æ–≥)
‚Ä¢ MongoDB Atlas Security
‚Ä¢ Firewall protection

5. –ë–ò–î –•–£–í–ê–ê–õ–¶–î–ê–ì–ì“Æ–ô

‚úÖ –ë–∏–¥ —Ç–∞–Ω—ã –º—ç–¥—ç—ç–ª–ª–∏–π–≥:
‚Ä¢ –ë–û–†–õ–£–£–õ–î–ê–ì–ì“Æ–ô
‚Ä¢ –ó–ê–†–î–ê–ì–ì“Æ–ô
‚Ä¢ –ú–ê–†–ö–ï–¢–ò–ù–ì –•–ò–ô–î–≠–ì–ì“Æ–ô

6. –¢–ê–ù–´ –≠–†–•“Æ“Æ–î

‚Ä¢ “Æ–∑—ç—Ö —ç—Ä—Ö - –ê–ø–ø ‚Üí –ü—Ä–æ—Ñ–∞–π–ª ‚Üí "–ú–∏–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª"
‚Ä¢ –ó–∞—Å–∞—Ö —ç—Ä—Ö - –ê–ø–ø ‚Üí –ü—Ä–æ—Ñ–∞–π–ª ‚Üí "–ú—ç–¥—ç—ç–ª—ç–ª –∑–∞—Å–∞—Ö"
‚Ä¢ –£—Å—Ç–≥–∞—Ö —ç—Ä—Ö - –ê–ø–ø ‚Üí –ü—Ä–æ—Ñ–∞–π–ª ‚Üí "–ë“Ø—Ä—Ç–≥—ç–ª —É—Å—Ç–≥–∞—Ö"

‚ö†Ô∏è –£—Å—Ç–≥–∞—Å–Ω—ã –¥–∞—Ä–∞–∞ —Å—ç—Ä–≥—ç—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π!

7. –•–û–õ–ë–û–û –ë–ê–†–ò–•

üìß privacy@predictrix.com
üìß support@predictrix.com

–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π: docs/PRIVACY_POLICY.md`,
      },
      about: {
        title: "–ê–ø–ø-—ã–Ω —Ç—É—Ö–∞–π",
        content: `‚ÑπÔ∏è –§–û–†–ï–ö–° –°–ò–ì–ù–ê–õ –ê–ü–ü

–•—É–≤–∏–ª–±–∞—Ä: 1.0.1
–®–∏–Ω—ç—á–∏–ª—Å—ç–Ω: 2025.10.18

üéØ –ó–æ—Ä–∏–ª–≥–æ:
Hidden Markov Model (HMM) –º–∞—à–∏–Ω —Å—É—Ä–≥–∞–ª—Ç –∞—à–∏–≥–ª–∞–Ω —Ñ–æ—Ä–µ–∫—Å –≤–∞–ª—é—Ç—ã–Ω —Ö–∞–Ω—à–∏–π–Ω —Ö”©–¥”©–ª–≥”©”©–Ω–∏–π–≥ —Ç–∞–∞–º–∞–≥–ª–∞—Ö, —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö.

üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏:
‚Ä¢ Frontend: React Native + Expo
‚Ä¢ Backend: Python Flask
‚Ä¢ Database: MongoDB Atlas
‚Ä¢ ML Model: Hidden Markov Model
‚Ä¢ Security: JWT + bcrypt

üìä –î—ç–º–∂–¥—ç–≥ –≤–∞–ª—é—Ç—É—É–¥:
‚Ä¢ EUR/USD (–ï–≤—Ä–æ/–ê–º.–¥–æ–ª–ª–∞—Ä)
‚Ä¢ GBP/USD (–§—É–Ω—Ç/–ê–º.–¥–æ–ª–ª–∞—Ä)
‚Ä¢ USD/CAD (–ê–º.–¥–æ–ª–ª–∞—Ä/–ö–∞–Ω–∞–¥ –¥–æ–ª–ª–∞—Ä)
‚Ä¢ USD/CHF (–ê–º.–¥–æ–ª–ª–∞—Ä/–®–≤–µ–π—Ü–∞—Ä —Ñ—Ä–∞–Ω–∫)
‚Ä¢ USD/JPY (–ê–º.–¥–æ–ª–ª–∞—Ä/–ò–µ–Ω)
‚Ä¢ XAU/USD (–ê–ª—Ç/–ê–º.–¥–æ–ª–ª–∞—Ä)

üéì –°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∞–∂–∏–ª:
–≠–Ω—ç –∞–ø–ø –Ω—å —Å—É–¥–∞–ª–≥–∞–∞–Ω—ã –∑–æ—Ä–∏—É–ª–∞–ª—Ç–∞–∞—Ä —Ö”©–≥–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω –±”©–≥”©”©–¥ –±–æ–ª–æ–≤—Å—Ä–æ–ª—ã–Ω –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π.

‚ö†Ô∏è –°–∞–Ω–∞–º–∂:
–≠–Ω—ç –Ω—å —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω –∑”©–≤–ª”©–≥”©”© –±–∏—à. –§–æ—Ä–µ–∫—Å –∞—Ä–∏–ª–∂–∞–∞ –º–∞—à ”©–Ω–¥”©—Ä —ç—Ä—Å–¥—ç–ª—Ç—ç–π –±”©–≥”©”©–¥ —Ç–∞–Ω—ã –±“Ø—Ö —Ö”©—Ä”©–Ω–≥–∏–π–≥ –∞–ª–¥–∞—Ö –º–∞–≥–∞–¥–ª–∞–ª—Ç–∞–π.

üë®‚Äçüíª –•”©–≥–∂“Ø“Ø–ª—ç–≥—á:
GitHub: github.com/Asura-lab/Predictrix

üìÑ –õ–∏—Ü–µ–Ω–∑:
–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –∑–æ—Ä–∏—É–ª–∞–ª—Ç–∞–∞—Ä “Ø–Ω—ç–≥“Ø–π –∞—à–∏–≥–ª–∞–∂ –±–æ–ª–Ω–æ.

¬© 2025 Predictrix`,
      },
    };

    setCurrentDocument(documents[docType]);
    setShowDocumentModal(true);
  };

  // Open external link
  const openExternalLink = (url) => {
    Alert.alert(
      "–•–æ–ª–±–æ–æ—Å –Ω—ç—ç—Ö",
      "–¢–∞ –≤—ç–± —Ö”©—Ç”©—á –¥—ç—ç—Ä –Ω—ç—ç—Ö–¥—ç—ç –∏—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞ —É—É?",
      [
        { text: "“Æ–≥“Ø–π", style: "cancel" },
        { text: "–¢–∏–π–º", onPress: () => Linking.openURL(url) },
      ]
    );
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <LinearGradient
        colors={["#1a237e", "#283593", "#3949ab"]}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <View style={styles.avatarContainer}>
            <View style={styles.avatar}>
              <Ionicons name="person" size={50} color="#FFFFFF" />
            </View>
            <TouchableOpacity style={styles.editAvatarButton}>
              <Ionicons name="camera" size={20} color="#FFFFFF" />
            </TouchableOpacity>
          </View>
          <Text style={styles.userName}>{userData?.name || "–•—ç—Ä—ç–≥–ª—ç–≥—á"}</Text>
          <Text style={styles.userEmail}>{userData?.email || ""}</Text>
        </View>
      </LinearGradient>

      <ScrollView style={styles.content}>
        {/* Statistics Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫</Text>

          <View style={styles.statsContainer}>
            <View style={styles.statCard}>
              <View style={styles.statIconContainer}>
                <Ionicons name="calendar-outline" size={24} color="#4CAF50" />
              </View>
              <Text style={styles.statValue}>{stats.daysUsed}</Text>
              <Text style={styles.statLabel}>–•–æ–Ω–æ–≥ –∞—à–∏–≥–ª–∞—Å–∞–Ω</Text>
            </View>

            <View style={styles.statCard}>
              <View style={styles.statIconContainer}>
                <Ionicons
                  name="notifications-outline"
                  size={24}
                  color="#2196F3"
                />
              </View>
              <Text style={styles.statValue}>{stats.signalsReceived}</Text>
              <Text style={styles.statLabel}>–°–∏–≥–Ω–∞–ª –∞–≤—Å–∞–Ω</Text>
            </View>

            <View style={styles.statCard}>
              <View style={styles.statIconContainer}>
                <Ionicons
                  name="checkmark-circle-outline"
                  size={24}
                  color="#FF9800"
                />
              </View>
              <Text style={styles.statValue}>
                {stats.lastActive || "”®–Ω”©”©–¥”©—Ä"}
              </Text>
              <Text style={styles.statLabel}>–°“Ø“Ø–ª–¥ –Ω—ç–≤—Ç—ç—Ä—Å—ç–Ω</Text>
            </View>
          </View>
        </View>

        {/* Personal Information Section */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>–•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª</Text>
            {!editMode && (
              <TouchableOpacity
                onPress={() => setEditMode(true)}
                style={styles.editButton}
              >
                <Ionicons name="pencil" size={20} color="#2196F3" />
                <Text style={styles.editButtonText}>–ó–∞—Å–∞—Ö</Text>
              </TouchableOpacity>
            )}
          </View>

          <View style={styles.infoCard}>
            <View style={styles.infoRow}>
              <View style={styles.infoIcon}>
                <Ionicons name="person-outline" size={22} color="#666" />
              </View>
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>–ù—ç—Ä</Text>
                {editMode ? (
                  <TextInput
                    style={styles.input}
                    value={name}
                    onChangeText={setName}
                    placeholder="–ù—ç—Ä –æ—Ä—É—É–ª–∞—Ö"
                  />
                ) : (
                  <Text style={styles.infoValue}>{name}</Text>
                )}
              </View>
            </View>

            <View style={styles.divider} />

            <View style={styles.infoRow}>
              <View style={styles.infoIcon}>
                <Ionicons name="mail-outline" size={22} color="#666" />
              </View>
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>–ò–º—ç–π–ª</Text>
                {editMode ? (
                  <TextInput
                    style={styles.input}
                    value={email}
                    onChangeText={setEmail}
                    placeholder="–ò–º—ç–π–ª –æ—Ä—É—É–ª–∞—Ö"
                    keyboardType="email-address"
                  />
                ) : (
                  <Text style={styles.infoValue}>{email}</Text>
                )}
              </View>
            </View>

            {editMode && (
              <>
                <View style={styles.divider} />
                <View style={styles.buttonRow}>
                  <TouchableOpacity
                    style={[styles.actionButton, styles.cancelButton]}
                    onPress={() => {
                      setEditMode(false);
                      setName(userData?.name || "");
                      setEmail(userData?.email || "");
                    }}
                  >
                    <Text style={styles.cancelButtonText}>–¶—É—Ü–ª–∞—Ö</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.actionButton, styles.saveButton]}
                    onPress={handleSave}
                    disabled={loading}
                  >
                    {loading ? (
                      <ActivityIndicator color="#FFFFFF" />
                    ) : (
                      <Text style={styles.saveButtonText}>–•–∞–¥–≥–∞–ª–∞—Ö</Text>
                    )}
                  </TouchableOpacity>
                </View>
              </>
            )}
          </View>
        </View>

        {/* Settings Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–¢–æ—Ö–∏—Ä–≥–æ–æ</Text>

          <View style={styles.infoCard}>
            <View style={styles.infoRow}>
              <View style={styles.infoIcon}>
                <Ionicons name="notifications-outline" size={22} color="#666" />
              </View>
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>–ú—ç–¥—ç–≥–¥—ç–ª</Text>
                <Text style={styles.infoDescription}>
                  –°–∏–≥–Ω–∞–ª –∏—Ä—ç—Ö “Ø–µ–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç
                </Text>
              </View>
              <Switch
                value={notifications}
                onValueChange={handleNotificationToggle}
                trackColor={{ false: "#E0E0E0", true: "#4CAF50" }}
                thumbColor={notifications ? "#FFFFFF" : "#F5F5F5"}
              />
            </View>

            <View style={styles.divider} />

            <View style={styles.infoRow}>
              <View style={styles.infoIcon}>
                <Ionicons
                  name={
                    themeMode === "dark"
                      ? "moon"
                      : themeMode === "light"
                      ? "sunny"
                      : "contrast"
                  }
                  size={22}
                  color="#666"
                />
              </View>
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>–î—ç–ª–≥—ç—Ü–∏–π–Ω –≥–æ—Ä–∏–º</Text>
                <Text style={styles.infoDescription}>
                  {themeMode === "dark"
                    ? "üåô –•–∞—Ä–∞–Ω—Ö—É–π"
                    : themeMode === "light"
                    ? "‚òÄÔ∏è –ì—ç—Ä—ç–ª"
                    : "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç"}
                </Text>
              </View>
              <TouchableOpacity
                style={styles.themeButton}
                onPress={() => handleDarkModeToggle(themeMode)}
              >
                <Text style={styles.themeButtonText}>–°–æ–ª–∏—Ö</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>

        {/* Security Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–ê—é—É–ª–≥“Ø–π –±–∞–π–¥–∞–ª</Text>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={handleChangePassword}
          >
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons name="lock-closed-outline" size={22} color="#666" />
              </View>
              <Text style={styles.menuItemText}>–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö</Text>
            </View>
            <Ionicons name="chevron-forward" size={22} color="#999" />
          </TouchableOpacity>
        </View>

        {/* About Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–ú—ç–¥—ç—ç–ª—ç–ª</Text>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => openDocument("help")}
          >
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons name="help-circle-outline" size={22} color="#666" />
              </View>
              <Text style={styles.menuItemText}>–¢—É—Å–ª–∞–º–∂</Text>
            </View>
            <Ionicons name="chevron-forward" size={22} color="#999" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => openDocument("terms")}
          >
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons name="document-text-outline" size={22} color="#666" />
              </View>
              <Text style={styles.menuItemText}>“Æ–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü”©–ª</Text>
            </View>
            <Ionicons name="chevron-forward" size={22} color="#999" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => openDocument("privacy")}
          >
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons
                  name="shield-checkmark-outline"
                  size={22}
                  color="#666"
                />
              </View>
              <Text style={styles.menuItemText}>–ù—É—É—Ü–ª–∞–ª—ã–Ω –±–æ–¥–ª–æ–≥–æ</Text>
            </View>
            <Ionicons name="chevron-forward" size={22} color="#999" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => openDocument("about")}
          >
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons
                  name="information-circle-outline"
                  size={22}
                  color="#666"
                />
              </View>
              <Text style={styles.menuItemText}>–ê–ø–ø-—ã–Ω —Ç—É—Ö–∞–π</Text>
            </View>
            <Ionicons name="chevron-forward" size={22} color="#999" />
          </TouchableOpacity>

          <View style={styles.menuItem}>
            <View style={styles.menuItemLeft}>
              <View style={styles.menuIcon}>
                <Ionicons name="code-outline" size={22} color="#666" />
              </View>
              <Text style={styles.menuItemText}>–•—É–≤–∏–ª–±–∞—Ä</Text>
            </View>
            <Text style={styles.versionText}>1.0.0</Text>
          </View>
        </View>

        {/* Logout Button */}
        <View style={styles.section}>
          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
            <Ionicons name="log-out-outline" size={22} color="#F44336" />
            <Text style={styles.logoutButtonText}>–ì–∞—Ä–∞—Ö</Text>
          </TouchableOpacity>
        </View>

        <View style={{ height: 40 }} />
      </ScrollView>

      {/* Password Change Modal */}
      <Modal
        visible={showPasswordModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowPasswordModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö</Text>
              <TouchableOpacity
                onPress={() => {
                  setShowPasswordModal(false);
                  setOldPassword("");
                  setNewPassword("");
                  setConfirmPassword("");
                }}
              >
                <Ionicons name="close" size={28} color="#666" />
              </TouchableOpacity>
            </View>

            <View style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–•—É—É—á–∏–Ω –Ω—É—É—Ü “Ø–≥</Text>
                <TextInput
                  style={styles.modalInput}
                  value={oldPassword}
                  onChangeText={setOldPassword}
                  secureTextEntry
                  placeholder="–•—É—É—á–∏–Ω –Ω—É—É—Ü “Ø–≥ –æ—Ä—É—É–ª–∞—Ö"
                  autoCapitalize="none"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥</Text>
                <TextInput
                  style={styles.modalInput}
                  value={newPassword}
                  onChangeText={setNewPassword}
                  secureTextEntry
                  placeholder="–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ (–¥–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç)"
                  autoCapitalize="none"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>–ù—É—É—Ü “Ø–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö</Text>
                <TextInput
                  style={styles.modalInput}
                  value={confirmPassword}
                  onChangeText={setConfirmPassword}
                  secureTextEntry
                  placeholder="–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ –¥–∞—Ö–∏–Ω –æ—Ä—É—É–ª–∞—Ö"
                  autoCapitalize="none"
                />
              </View>

              <TouchableOpacity
                style={styles.modalButton}
                onPress={handlePasswordChange}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator color="#FFFFFF" />
                ) : (
                  <Text style={styles.modalButtonText}>–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Document Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={showDocumentModal}
        onRequestClose={() => setShowDocumentModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.documentModalContainer}>
            <View style={styles.documentModalHeader}>
              <Text style={styles.documentModalTitle}>
                {currentDocument?.title}
              </Text>
              <TouchableOpacity
                onPress={() => setShowDocumentModal(false)}
                style={styles.documentCloseButton}
              >
                <Ionicons name="close" size={28} color="#666" />
              </TouchableOpacity>
            </View>

            <ScrollView
              style={styles.documentContent}
              showsVerticalScrollIndicator={true}
            >
              <Text style={styles.documentText}>
                {currentDocument?.content}
              </Text>
            </ScrollView>

            <View style={styles.documentModalFooter}>
              <TouchableOpacity
                style={styles.documentButton}
                onPress={() => setShowDocumentModal(false)}
              >
                <Text style={styles.documentButtonText}>–•–∞–∞—Ö</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const createStyles = (colors) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    header: {
      paddingTop: 60,
      paddingBottom: 30,
      paddingHorizontal: 20,
      alignItems: "center",
    },
    headerContent: {
      alignItems: "center",
    },
    avatarContainer: {
      position: "relative",
      marginBottom: 16,
    },
    avatar: {
      width: 100,
      height: 100,
      borderRadius: 50,
      backgroundColor: "rgba(255, 255, 255, 0.2)",
      justifyContent: "center",
      alignItems: "center",
      borderWidth: 3,
      borderColor: "#FFFFFF",
    },
    editAvatarButton: {
      position: "absolute",
      bottom: 0,
      right: 0,
      backgroundColor: colors.info,
      width: 36,
      height: 36,
      borderRadius: 18,
      justifyContent: "center",
      alignItems: "center",
      borderWidth: 3,
      borderColor: "#FFFFFF",
    },
    userName: {
      fontSize: 24,
      fontWeight: "bold",
      color: colors.textPrimary,
      marginBottom: 4,
    },
    userEmail: {
      fontSize: 14,
      color: "rgba(255, 255, 255, 0.8)",
    },
    content: {
      flex: 1,
    },
    section: {
      marginTop: 20,
      paddingHorizontal: 16,
    },
    statsContainer: {
      flexDirection: "row",
      justifyContent: "space-between",
      gap: 12,
    },
    statCard: {
      flex: 1,
      backgroundColor: colors.card,
      borderRadius: 12,
      padding: 16,
      alignItems: "center",
      shadowColor: "#000",
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    statIconContainer: {
      width: 48,
      height: 48,
      borderRadius: 24,
      backgroundColor: colors.input,
      justifyContent: "center",
      alignItems: "center",
      marginBottom: 8,
    },
    statValue: {
      fontSize: 20,
      fontWeight: "bold",
      color: colors.textDark,
      marginBottom: 4,
    },
    statLabel: {
      fontSize: 12,
      color: colors.textLabel,
      textAlign: "center",
    },
    sectionHeader: {
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      marginBottom: 12,
    },
    sectionTitle: {
      fontSize: 18,
      fontWeight: "bold",
      color: colors.textDark,
      marginBottom: 12,
    },
    editButton: {
      flexDirection: "row",
      alignItems: "center",
      backgroundColor: colors.primary + "20",
      paddingHorizontal: 12,
      paddingVertical: 6,
      borderRadius: 20,
    },
    editButtonText: {
      marginLeft: 4,
      color: colors.primary,
      fontSize: 14,
      fontWeight: "600",
    },
    infoCard: {
      backgroundColor: colors.card,
      borderRadius: 12,
      padding: 16,
      shadowColor: "#000",
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    infoRow: {
      flexDirection: "row",
      alignItems: "center",
      paddingVertical: 12,
    },
    infoIcon: {
      width: 40,
      height: 40,
      borderRadius: 20,
      backgroundColor: colors.input,
      justifyContent: "center",
      alignItems: "center",
      marginRight: 12,
    },
    infoContent: {
      flex: 1,
    },
    infoLabel: {
      fontSize: 12,
      color: colors.textLabel,
      marginBottom: 4,
    },
    infoValue: {
      fontSize: 16,
      color: colors.textDark,
      fontWeight: "500",
    },
    infoDescription: {
      fontSize: 12,
      color: colors.textLabel,
      marginTop: 2,
    },
    input: {
      fontSize: 16,
      color: colors.textDark,
      fontWeight: "500",
      borderBottomWidth: 1,
      borderBottomColor: "#2196F3",
      paddingVertical: 4,
    },
    divider: {
      height: 1,
      backgroundColor: colors.borderDark,
      marginVertical: 8,
    },
    buttonRow: {
      flexDirection: "row",
      justifyContent: "space-between",
      marginTop: 16,
      gap: 12,
    },
    actionButton: {
      flex: 1,
      paddingVertical: 12,
      borderRadius: 8,
      alignItems: "center",
    },
    cancelButton: {
      backgroundColor: colors.input,
    },
    cancelButtonText: {
      color: colors.textLabel,
      fontSize: 16,
      fontWeight: "600",
    },
    saveButton: {
      backgroundColor: colors.secondary,
    },
    saveButtonText: {
      color: colors.textPrimary,
      fontSize: 16,
      fontWeight: "600",
    },
    menuItem: {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "space-between",
      backgroundColor: colors.card,
      padding: 16,
      borderRadius: 12,
      marginBottom: 8,
      shadowColor: "#000",
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.05,
      shadowRadius: 2,
      elevation: 2,
    },
    menuItemLeft: {
      flexDirection: "row",
      alignItems: "center",
    },
    menuIcon: {
      width: 40,
      height: 40,
      borderRadius: 20,
      backgroundColor: colors.input,
      justifyContent: "center",
      alignItems: "center",
      marginRight: 12,
    },
    menuItemText: {
      fontSize: 16,
      color: colors.textDark,
      fontWeight: "500",
    },
    versionText: {
      fontSize: 14,
      color: colors.textLabel,
    },
    logoutButton: {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "center",
      backgroundColor: colors.card,
      padding: 16,
      borderRadius: 12,
      borderWidth: 2,
      borderColor: "#F44336",
    },
    logoutButtonText: {
      marginLeft: 8,
      fontSize: 16,
      color: "#F44336",
      fontWeight: "600",
    },
    modalOverlay: {
      flex: 1,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      justifyContent: "flex-end",
    },
    modalContent: {
      backgroundColor: colors.card,
      borderTopLeftRadius: 24,
      borderTopRightRadius: 24,
      paddingBottom: 40,
    },
    modalHeader: {
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      padding: 20,
      borderBottomWidth: 1,
      borderBottomColor: "#E0E0E0",
    },
    modalTitle: {
      fontSize: 20,
      fontWeight: "bold",
      color: colors.textDark,
    },
    modalBody: {
      padding: 20,
    },
    inputGroup: {
      marginBottom: 20,
    },
    inputLabel: {
      fontSize: 14,
      fontWeight: "600",
      color: colors.textDark,
      marginBottom: 8,
    },
    modalInput: {
      borderWidth: 1,
      borderColor: colors.borderDark,
      borderRadius: 8,
      padding: 12,
      fontSize: 16,
      color: colors.textDark,
      backgroundColor: colors.cardSecondary,
    },
    modalButton: {
      backgroundColor: colors.secondary,
      borderRadius: 8,
      padding: 16,
      alignItems: "center",
      marginTop: 10,
    },
    modalButtonText: {
      color: colors.textPrimary,
      fontSize: 16,
      fontWeight: "600",
    },
    // Document Modal Styles
    documentModalContainer: {
      backgroundColor: colors.card,
      borderTopLeftRadius: 24,
      borderTopRightRadius: 24,
      height: "85%",
      paddingBottom: 0,
    },
    documentModalHeader: {
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      padding: 20,
      borderBottomWidth: 1,
      borderBottomColor: "#E0E0E0",
    },
    documentModalTitle: {
      fontSize: 20,
      fontWeight: "700",
      color: colors.textDark,
      flex: 1,
    },
    documentCloseButton: {
      padding: 4,
    },
    documentContent: {
      flex: 1,
      padding: 20,
    },
    documentText: {
      fontSize: 15,
      lineHeight: 24,
      color: colors.textDark,
      fontFamily: Platform.OS === "ios" ? "Menlo" : "monospace",
    },
    documentModalFooter: {
      padding: 20,
      borderTopWidth: 1,
      borderTopColor: colors.borderDark,
    },
    documentButton: {
      backgroundColor: colors.primary,
      borderRadius: 8,
      padding: 16,
      alignItems: "center",
    },
    documentButtonText: {
      color: colors.textPrimary,
      fontSize: 16,
      fontWeight: "600",
    },
    themeButton: {
      backgroundColor: colors.secondary,
      paddingHorizontal: 16,
      paddingVertical: 8,
      borderRadius: 8,
    },
    themeButtonText: {
      color: colors.textPrimary,
      fontSize: 14,
      fontWeight: "600",
    },
  });

export default ProfileScreen;
