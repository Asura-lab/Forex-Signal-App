# -*- coding: utf-8 -*-
"""
–§–æ—Ä–µ–∫—Å –°–∏–≥–Ω–∞–ª Full Backend API
MongoDB + JWT Authentication + HMM Prediction
"""

import sys
from pathlib import Path

# Add parent directory to path
sys.path.append(str(Path(__file__).resolve().parent.parent))

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_mail import Mail, Message
from pymongo import MongoClient
from datetime import datetime, timedelta
import jwt
import bcrypt
import pandas as pd
import numpy as np
import pickle
import os
import random

# Import configuration
from config.settings import (
    MONGO_URI, SECRET_KEY, API_HOST, API_PORT, DEBUG_MODE,
    MODELS_DIR, CURRENCY_PAIRS,
    MAIL_SERVER, MAIL_PORT, MAIL_USE_TLS, MAIL_USE_SSL,
    MAIL_USERNAME, MAIL_PASSWORD, MAIL_DEFAULT_SENDER,
    VERIFICATION_CODE_EXPIRY_MINUTES, RESET_CODE_EXPIRY_MINUTES
)

app = Flask(__name__)
CORS(app)

# Flask-Mail configuration
app.config['MAIL_SERVER'] = MAIL_SERVER
app.config['MAIL_PORT'] = MAIL_PORT
app.config['MAIL_USE_TLS'] = MAIL_USE_TLS
app.config['MAIL_USE_SSL'] = MAIL_USE_SSL
app.config['MAIL_USERNAME'] = MAIL_USERNAME
app.config['MAIL_PASSWORD'] = MAIL_PASSWORD
app.config['MAIL_DEFAULT_SENDER'] = MAIL_DEFAULT_SENDER

mail = Mail(app)

# ==================== DATABASE SETUP ====================

# MongoDB client “Ø“Ø—Å–≥—ç—Ö
try:
    client = MongoClient(MONGO_URI)
    db = client['users_db']
    users_collection = db['users']
    verification_codes = db['verification_codes']  # –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç
    reset_codes = db['reset_codes']  # –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö
    print("‚úì MongoDB —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ")
except Exception as e:
    print(f"‚úó MongoDB —Ö–æ–ª–±–æ–≥–¥–æ—Ö –∞–ª–¥–∞–∞: {e}")
    exit(1)

# ML Models
model = None
scaler = None

def load_ml_models():
    """HMM –º–æ–¥–µ–ª—å –±–∞ scaler –∞—á–∞–∞–ª–∞—Ö"""
    global model, scaler
    
    model_path = MODELS_DIR / 'hmm_forex_model.pkl'
    scaler_path = MODELS_DIR / 'hmm_scaler.pkl'
    
    try:
        if model_path.exists():
            with open(model_path, 'rb') as f:
                model = pickle.load(f)
            print("‚úì HMM –º–æ–¥–µ–ª—å –∞—á–∞–∞–ª–∞–≥–¥–ª–∞–∞")
        else:
            print("‚ö† HMM –º–æ–¥–µ–ª—å –æ–ª–¥—Å–æ–Ω–≥“Ø–π (prediction –∏–¥—ç–≤—Ö–≥“Ø–π)")
        
        if scaler_path.exists():
            with open(scaler_path, 'rb') as f:
                scaler = pickle.load(f)
            print("‚úì Scaler –∞—á–∞–∞–ª–∞–≥–¥–ª–∞–∞")
        else:
            print("‚ö† Scaler –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            
        return model is not None and scaler is not None
    except Exception as e:
        print(f"‚úó –ú–æ–¥–µ–ª—å –∞—á–∞–∞–ª–∞—Ö –∞–ª–¥–∞–∞: {e}")
        return False

# Load models on startup
load_ml_models()

# ==================== AUTH HELPER FUNCTIONS ====================

def generate_verification_code():
    """6 –æ—Ä–æ–Ω—Ç–æ–π —Å–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π –∫–æ–¥ “Ø“Ø—Å–≥—ç—Ö"""
    return ''.join([str(random.randint(0, 9)) for _ in range(6)])

def send_verification_email(email, code, name=""):
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ –∏–ª–≥—ç—ç—Ö"""
    try:
        msg = Message(
            subject='Forex Signal App - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç',
            recipients=[email]
        )
        msg.html = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background: linear-gradient(135deg, #1a237e 0%, #283593 50%, #3949ab 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0;">üìà Forex Signal App</h1>
        </div>
        
        <div style="background-color: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <h2 style="color: #1a237e;">–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É {name}!</h2>
            
            <p>Forex Signal App-–¥ —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª! üéâ</p>
            
            <p>–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:</p>
            
            <div style="background-color: #f0f0f0; padding: 20px; text-align: center; border-radius: 8px; margin: 20px 0;">
                <h1 style="color: #1a237e; font-size: 36px; letter-spacing: 8px; margin: 0;">{code}</h1>
            </div>
            
            <p style="color: #666; font-size: 14px;">‚è± –≠–Ω—ç –∫–æ–¥ <strong>{VERIFICATION_CODE_EXPIRY_MINUTES} –º–∏–Ω—É—Ç—ã–Ω</strong> —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ —Ö“Ø—á–∏–Ω—Ç—ç–π.</p>
            
            <hr style="border: none; border-top: 1px solid #e0e0e0; margin: 20px 0;">
            
            <p style="color: #999; font-size: 12px;">
                –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç –±“Ø—Ä—Ç–≥—ç–ª–∏–π–≥ “Ø“Ø—Å–≥—ç—ç–≥“Ø–π –±–æ–ª —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ “Ø–ª —Ç–æ–æ–º—Å–æ—Ä–ª–æ–æ—Ä–æ–π.
            </p>
            
            <p style="color: #1a237e; font-weight: bold;">”®–¥—Ä–∏–π–≥ —Å–∞–π—Ö–∞–Ω ”©–Ω–≥”©—Ä“Ø“Ø–ª—ç—ç—Ä—ç–π!<br>Forex Signal App –±–∞–≥</p>
        </div>
    </div>
</body>
</html>
"""
        mail.send(msg)
        return True
    except Exception as e:
        print(f"‚ùå Email –∏–ª–≥—ç—ç—Ö –∞–ª–¥–∞–∞: {e}")
        return False

def send_reset_password_email(email, code, name=""):
    """–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö –∫–æ–¥ –∏–ª–≥—ç—ç—Ö"""
    try:
        msg = Message(
            subject='Forex Signal App - –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö',
            recipients=[email]
        )
        msg.html = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background: linear-gradient(135deg, #1a237e 0%, #283593 50%, #3949ab 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0;">üîê –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö</h1>
        </div>
        
        <div style="background-color: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <h2 style="color: #1a237e;">–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É {name}!</h2>
            
            <p>–¢–∞ –Ω—É—É—Ü “Ø–≥—ç—ç —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω –±–∞–π–Ω–∞.</p>
            
            <p>–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö –∫–æ–¥—ã–≥ –¥–æ–æ—Ä —Ö–∞—Ä–Ω–∞ —É—É:</p>
            
            <div style="background-color: #fff3e0; padding: 20px; text-align: center; border-radius: 8px; margin: 20px 0; border: 2px solid #ff9800;">
                <h1 style="color: #ff6f00; font-size: 36px; letter-spacing: 8px; margin: 0;">{code}</h1>
            </div>
            
            <p style="color: #666; font-size: 14px;">‚è± –≠–Ω—ç –∫–æ–¥ <strong>{RESET_CODE_EXPIRY_MINUTES} –º–∏–Ω—É—Ç—ã–Ω</strong> —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ —Ö“Ø—á–∏–Ω—Ç—ç–π.</p>
            
            <div style="background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0;">
                <p style="margin: 0; color: #856404;">
                    ‚ö†Ô∏è <strong>–ê–Ω—Ö–∞–∞—Ä:</strong> –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∏–ª–≥—ç—ç–≥—ç—ç–≥“Ø–π –±–æ–ª –Ω—É—É—Ü “Ø–≥—ç—ç –®–£–£–î —Å–æ–ª–∏–æ—Ä–æ–π!
                </p>
            </div>
            
            <p style="color: #1a237e; font-weight: bold;">Forex Signal App –±–∞–≥</p>
        </div>
    </div>
</body>
</html>
"""
        mail.send(msg)
        return True
    except Exception as e:
        print(f"‚ùå Email –∏–ª–≥—ç—ç—Ö –∞–ª–¥–∞–∞: {e}")
        return False

def hash_password(password):
    """–ù—É—É—Ü “Ø–≥–∏–π–≥ hash —Ö–∏–π—Ö"""
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def verify_password(password, hashed):
    """–ù—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö"""
    return bcrypt.checkpw(password.encode('utf-8'), hashed)

def generate_token(user_id, email):
    """JWT token “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'user_id': user_id,
        'email': email,
        'exp': datetime.utcnow() + timedelta(days=7),
        'iat': datetime.utcnow()
    }
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

def verify_token(token):
    """JWT token —à–∞–ª–≥–∞—Ö"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def get_user_from_token(token):
    """Token-–æ–æ—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–æ—Ö"""
    payload = verify_token(token)
    if payload:
        user = users_collection.find_one(
            {'_id': payload['user_id']},
            {'password': 0}
        )
        return user
    return None

# ==================== ML HELPER FUNCTIONS ====================

def calculate_features(df):
    """–¢–µ—Ö–Ω–∏–∫–∏–π–Ω —à–∏–Ω–∂ —á–∞–Ω–∞—Ä—É—É–¥ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö"""
    df = df.copy()
    
    # “Æ–Ω–∏–π–Ω ”©”©—Ä—á–ª”©–ª—Ç
    df['returns'] = df['close'].pct_change()
    
    # Moving averages
    df['MA_5'] = df['close'].rolling(window=5).mean()
    df['MA_20'] = df['close'].rolling(window=20).mean()
    
    # Volatility (Standard Deviation)
    df['volatility'] = df['returns'].rolling(window=20).std()
    
    # RSI (Relative Strength Index)
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    # Volume
    if 'volume' in df.columns:
        df['volume_ma'] = df['volume'].rolling(window=20).mean()
    
    # NaN —É—Ç–≥—É—É–¥—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö
    df = df.dropna()
    
    return df

def get_signal_name(signal):
    """Signal –¥—É–≥–∞–∞—Ä—ã–≥ –Ω—ç—Ä –±–æ–ª–≥–æ–∂ —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö"""
    signals = {
        0: "STRONG BUY",
        1: "BUY", 
        2: "NEUTRAL",
        3: "SELL",
        4: "STRONG SELL"
    }
    return signals.get(signal, "UNKNOWN")

# ==================== ROOT ENDPOINT ====================

@app.route('/')
def index():
    """API –º—ç–¥—ç—ç–ª—ç–ª"""
    return jsonify({
        'name': '–§–æ—Ä–µ–∫—Å –°–∏–≥–Ω–∞–ª Full API',
        'version': '2.0',
        'database': 'MongoDB',
        'auth': 'JWT',
        'ml_model': 'HMM' if model else 'Not loaded',
        'endpoints': {
            '/': 'GET - API –º—ç–¥—ç—ç–ª—ç–ª',
            '/auth/register': 'POST - –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö (–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç)',
            '/auth/verify-email': 'POST - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö',
            '/auth/resend-verification': 'POST - –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç—Ö',
            '/auth/login': 'POST - –ù—ç–≤—Ç—Ä—ç—Ö',
            '/auth/forgot-password': 'POST - –ù—É—É—Ü “Ø–≥ –º–∞—Ä—Ç—Å–∞–Ω',
            '/auth/verify-reset-code': 'POST - –°—ç—Ä–≥—ç—ç—Ö –∫–æ–¥ —à–∞–ª–≥–∞—Ö',
            '/auth/reset-password': 'POST - –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö',
            '/auth/verify': 'POST - Token —à–∞–ª–≥–∞—Ö',
            '/auth/me': 'GET - –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª',
            '/auth/update': 'PUT - –ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö',
            '/auth/change-password': 'PUT - –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö',
            '/predict': 'POST - Forex —Å–∏–≥–Ω–∞–ª —Ç–∞–∞–º–∞–≥–ª–∞—Ö',
            '/currencies': 'GET - –î—ç–º–∂–∏–≥–¥—Å—ç–Ω –≤–∞–ª—é—Ç—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç',
            '/health': 'GET - Health check'
        }
    })

# ==================== AUTHENTICATION ENDPOINTS ====================

@app.route('/auth/register', methods=['POST'])
def register():
    """–®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—Ç–∞–π"""
    try:
        data = request.json
        name = data.get('name', '').strip()
        email = data.get('email', '').strip().lower()
        password = data.get('password', '')
        
        # Validation
        if not name or not email or not password:
            return jsonify({
                'success': False,
                'error': '–ù—ç—Ä, –∏–º—ç–π–ª, –Ω—É—É—Ü “Ø–≥ –∑–∞–∞–≤–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 400
        
        if '@' not in email:
            return jsonify({
                'success': False,
                'error': '–ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É'
            }), 400
        
        if len(password) < 6:
            return jsonify({
                'success': False,
                'error': '–ù—É—É—Ü “Ø–≥ –¥–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π'
            }), 400
        
        # –ò–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        existing_user = users_collection.find_one({'email': email})
        if existing_user:
            return jsonify({
                'success': False,
                'error': '–≠–Ω—ç –∏–º—ç–π–ª —Ö–∞—è–≥ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞'
            }), 400
        
        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ “Ø“Ø—Å–≥—ç—Ö
        verification_code = generate_verification_code()
        
        # –ù—É—É—Ü “Ø–≥–∏–π–≥ hash —Ö–∏–π—Ö
        hashed_password = hash_password(password)
        
        # Verification code MongoDB-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
        verification_data = {
            'email': email,
            'name': name,
            'password': hashed_password,
            'code': verification_code,
            'expires_at': datetime.utcnow() + timedelta(minutes=VERIFICATION_CODE_EXPIRY_MINUTES),
            'created_at': datetime.utcnow()
        }
        
        # ”®–º–Ω”© –∏–ª–≥—ç—ç—Å—ç–Ω verification code –±–∞–π–≤–∞–ª —É—Å—Ç–≥–∞—Ö
        verification_codes.delete_many({'email': email})
        
        # –®–∏–Ω—ç verification code —Ö–∞–¥–≥–∞–ª–∞—Ö
        verification_codes.insert_one(verification_data)
        
        # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
        email_sent = send_verification_email(email, verification_code, name)
        
        if not email_sent:
            # Email —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–æ–ª DEMO —Ä–µ–∂–∏–º
            return jsonify({
                'success': True,
                'demo_mode': True,
                'verification_code': verification_code,
                'email': email,
                'message': 'DEMO —Ä–µ–∂–∏–º: –ò–º—ç–π–ª —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞'
            }), 200
        
        return jsonify({
            'success': True,
            'email': email,
            'message': f'–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ {email} —Ö–∞—è–≥ —Ä—É—É –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç'
        }), 200
        
    except Exception as e:
        print(f"Register error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ë“Ø—Ä—Ç–≥—ç–ª “Ø“Ø—Å–≥—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/login', methods=['POST'])
def login():
    """–ù—ç–≤—Ç—Ä—ç—Ö"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        password = data.get('password', '')
        
        # Validation
        if not email or not password:
            return jsonify({
                'success': False,
                'error': '–ò–º—ç–π–ª –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É'
            }), 400
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–æ—Ö
        user = users_collection.find_one({'email': email})
        
        if not user:
            return jsonify({
                'success': False,
                'error': '–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞'
            }), 401
        
        # –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
        if not user.get('email_verified', False):
            return jsonify({
                'success': False,
                'error': '–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É',
                'requires_verification': True
            }), 403
        
        # –ù—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö
        if not verify_password(password, user['password']):
            return jsonify({
                'success': False,
                'error': '–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞'
            }), 401
        
        # –°“Ø“Ø–ª–¥ –Ω—ç–≤—Ç—ç—Ä—Å—ç–Ω –æ–≥–Ω–æ–æ —à–∏–Ω—ç—á–ª—ç—Ö
        users_collection.update_one(
            {'_id': user['_id']},
            {'$set': {'last_login': datetime.utcnow()}}
        )
        
        # JWT token “Ø“Ø—Å–≥—ç—Ö
        user_id = str(user['_id'])
        token = generate_token(user_id, email)
        
        return jsonify({
            'success': True,
            'token': token,
            'user': {
                'id': user_id,
                'name': user['name'],
                'email': user['email']
            }
        })
        
    except Exception as e:
        print(f"Login error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ù—ç–≤—Ç—Ä—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/verify', methods=['POST'])
def verify():
    """Token —à–∞–ª–≥–∞—Ö"""
    try:
        data = request.json
        token = data.get('token', '')
        
        if not token:
            return jsonify({
                'success': False,
                'error': 'Token —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 400
        
        user = get_user_from_token(token)
        
        if user:
            return jsonify({
                'success': True,
                'valid': True,
                'user': {
                    'id': str(user['_id']),
                    'name': user['name'],
                    'email': user['email']
                }
            })
        else:
            return jsonify({
                'success': False,
                'valid': False,
                'error': 'Token –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'
            }), 401
        
    except Exception as e:
        print(f"Verify error: {e}")
        return jsonify({
            'success': False,
            'error': f'Token —à–∞–ª–≥–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/verify-email', methods=['POST'])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        code = data.get('code', '').strip()
        
        if not email or not code:
            return jsonify({
                'success': False,
                'error': '–ò–º—ç–π–ª –±–æ–ª–æ–Ω –∫–æ–¥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 400
        
        # Verification code –æ–ª–æ—Ö
        verification = verification_codes.find_one({'email': email})
        
        if not verification:
            return jsonify({
                'success': False,
                'error': '–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π'
            }), 404
        
        # –•—É–≥–∞—Ü–∞–∞ —à–∞–ª–≥–∞—Ö
        if datetime.utcnow() > verification['expires_at']:
            verification_codes.delete_one({'email': email})
            return jsonify({
                'success': False,
                'error': '–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –∫–æ–¥ —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'
            }), 400
        
        # –ö–æ–¥ —à–∞–ª–≥–∞—Ö
        if verification['code'] != code:
            return jsonify({
                'success': False,
                'error': '–ë—É—Ä—É—É –∫–æ–¥'
            }), 400
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç—Ö
        new_user = {
            'name': verification['name'],
            'email': verification['email'],
            'password': verification['password'],
            'email_verified': True,
            'verified_at': datetime.utcnow(),
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow(),
            'last_login': datetime.utcnow()
        }
        
        result = users_collection.insert_one(new_user)
        user_id = str(result.inserted_id)
        
        # Verification code —É—Å—Ç–≥–∞—Ö
        verification_codes.delete_one({'email': email})
        
        # JWT token “Ø“Ø—Å–≥—ç—Ö
        token = generate_token(user_id, email)
        
        return jsonify({
            'success': True,
            'token': token,
            'user': {
                'id': user_id,
                'name': new_user['name'],
                'email': new_user['email']
            },
            'message': '–ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞'
        }), 201
        
    except Exception as e:
        print(f"Verify email error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∞–ª–¥–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/resend-verification', methods=['POST'])
def resend_verification():
    """–ö–æ–¥ –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç—Ö"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        
        if not email:
            return jsonify({'success': False, 'error': '–ò–º—ç–π–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'}), 400
        
        verification = verification_codes.find_one({'email': email})
        if not verification:
            return jsonify({'success': False, 'error': '–ë“Ø—Ä—Ç–≥—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π'}), 404
        
        new_code = generate_verification_code()
        
        verification_codes.update_one(
            {'email': email},
            {'$set': {
                'code': new_code,
                'expires_at': datetime.utcnow() + timedelta(minutes=VERIFICATION_CODE_EXPIRY_MINUTES)
            }}
        )
        
        email_sent = send_verification_email(email, new_code, verification['name'])
        
        if not email_sent:
            return jsonify({
                'success': True,
                'demo_mode': True,
                'verification_code': new_code
            }), 200
        
        return jsonify({'success': True, 'message': '–®–∏–Ω—ç –∫–æ–¥ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç'}), 200
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/auth/forgot-password', methods=['POST'])
def forgot_password():
    """–ù—É—É—Ü “Ø–≥ –º–∞—Ä—Ç—Å–∞–Ω"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        
        if not email:
            return jsonify({'success': False, 'error': '–ò–º—ç–π–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'}), 400
        
        user = users_collection.find_one({'email': email})
        if not user:
            return jsonify({'success': True, 'message': '–•—ç—Ä—ç–≤ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–æ–ª –∫–æ–¥ –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω'}), 200
        
        reset_code = generate_verification_code()
        
        reset_codes.delete_many({'email': email})
        reset_codes.insert_one({
            'email': email,
            'code': reset_code,
            'expires_at': datetime.utcnow() + timedelta(minutes=RESET_CODE_EXPIRY_MINUTES),
            'created_at': datetime.utcnow()
        })
        
        email_sent = send_reset_password_email(email, reset_code, user['name'])
        
        if not email_sent:
            return jsonify({
                'success': True,
                'demo_mode': True,
                'reset_code': reset_code
            }), 200
        
        return jsonify({'success': True, 'message': '–°—ç—Ä–≥—ç—ç—Ö –∫–æ–¥ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç'}), 200
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/auth/verify-reset-code', methods=['POST'])
def verify_reset_code():
    """–°—ç—Ä–≥—ç—ç—Ö –∫–æ–¥ —à–∞–ª–≥–∞—Ö"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        code = data.get('code', '').strip()
        
        if not email or not code:
            return jsonify({'success': False, 'error': '–ò–º—ç–π–ª –±–æ–ª–æ–Ω –∫–æ–¥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'}), 400
        
        reset_data = reset_codes.find_one({'email': email})
        if not reset_data:
            return jsonify({'success': False, 'error': '–ö–æ–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π'}), 404
        
        if datetime.utcnow() > reset_data['expires_at']:
            reset_codes.delete_one({'email': email})
            return jsonify({'success': False, 'error': '–ö–æ–¥ —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'}), 400
        
        if reset_data['code'] != code:
            return jsonify({'success': False, 'error': '–ë—É—Ä—É—É –∫–æ–¥'}), 400
        
        return jsonify({'success': True, 'message': '–ö–æ–¥ –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞'}), 200
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/auth/reset-password', methods=['POST'])
def reset_password():
    """–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö"""
    try:
        data = request.json
        email = data.get('email', '').strip().lower()
        code = data.get('code', '').strip()
        new_password = data.get('new_password', '')
        
        if not email or not code or not new_password:
            return jsonify({'success': False, 'error': '–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'}), 400
        
        if len(new_password) < 6:
            return jsonify({'success': False, 'error': '–ù—É—É—Ü “Ø–≥ –¥–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç'}), 400
        
        reset_data = reset_codes.find_one({'email': email})
        if not reset_data:
            return jsonify({'success': False, 'error': '–ö–æ–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π'}), 404
        
        if datetime.utcnow() > reset_data['expires_at']:
            reset_codes.delete_one({'email': email})
            return jsonify({'success': False, 'error': '–ö–æ–¥ —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'}), 400
        
        if reset_data['code'] != code:
            return jsonify({'success': False, 'error': '–ë—É—Ä—É—É –∫–æ–¥'}), 400
        
        hashed_password = hash_password(new_password)
        
        users_collection.update_one(
            {'email': email},
            {'$set': {
                'password': hashed_password,
                'updated_at': datetime.utcnow()
            }}
        )
        
        reset_codes.delete_one({'email': email})
        
        return jsonify({'success': True, 'message': '–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ'}), 200
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/auth/me', methods=['GET'])
def get_me():
    """”®”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö"""
    try:
        auth_header = request.headers.get('Authorization', '')
        
        if not auth_header.startswith('Bearer '):
            return jsonify({
                'success': False,
                'error': 'Authorization header —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 401
        
        token = auth_header.split(' ')[1]
        user = get_user_from_token(token)
        
        if user:
            return jsonify({
                'success': True,
                'user': {
                    'id': str(user['_id']),
                    'name': user['name'],
                    'email': user['email'],
                    'created_at': user['created_at'].isoformat() if user.get('created_at') else None,
                    'last_login': user['last_login'].isoformat() if user.get('last_login') else None
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Token –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'
            }), 401
        
    except Exception as e:
        print(f"Get me error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ú—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/update', methods=['PUT'])
def update_profile():
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        auth_header = request.headers.get('Authorization', '')
        
        if not auth_header.startswith('Bearer '):
            return jsonify({
                'success': False,
                'error': 'Authorization header —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 401
        
        token = auth_header.split(' ')[1]
        payload = verify_token(token)
        
        if not payload:
            return jsonify({
                'success': False,
                'error': 'Token –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'
            }), 401
        
        data = request.json
        name = data.get('name', '').strip()
        
        if not name:
            return jsonify({
                'success': False,
                'error': '–ù—ç—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 400
        
        # –ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
        users_collection.update_one(
            {'_id': payload['user_id']},
            {'$set': {
                'name': name,
                'updated_at': datetime.utcnow()
            }}
        )
        
        return jsonify({
            'success': True,
            'message': '–ú—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç'
        })
        
    except Exception as e:
        print(f"Update error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/auth/change-password', methods=['PUT'])
def change_password():
    """–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö"""
    try:
        auth_header = request.headers.get('Authorization', '')
        
        if not auth_header.startswith('Bearer '):
            return jsonify({
                'success': False,
                'error': 'Authorization header —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 401
        
        token = auth_header.split(' ')[1]
        payload = verify_token(token)
        
        if not payload:
            return jsonify({
                'success': False,
                'error': 'Token –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω'
            }), 401
        
        data = request.json
        old_password = data.get('oldPassword', '')
        new_password = data.get('newPassword', '')
        
        if not old_password or not new_password:
            return jsonify({
                'success': False,
                'error': '–•—É—É—á–∏–Ω –±–æ–ª–æ–Ω —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π'
            }), 400
        
        if len(new_password) < 6:
            return jsonify({
                'success': False,
                'error': '–®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ –¥–æ—Ä —Ö–∞—è–∂ 6 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π'
            }), 400
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–æ—Ö
        user = users_collection.find_one({'_id': payload['user_id']})
        
        if not user:
            return jsonify({
                'success': False,
                'error': '–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π'
            }), 404
        
        # –•—É—É—á–∏–Ω –Ω—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö
        if not verify_password(old_password, user['password']):
            return jsonify({
                'success': False,
                'error': '–•—É—É—á–∏–Ω –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞'
            }), 401
        
        # –®–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ hash —Ö–∏–π–∂ —à–∏–Ω—ç—á–ª—ç—Ö
        new_hashed_password = hash_password(new_password)
        users_collection.update_one(
            {'_id': payload['user_id']},
            {'$set': {
                'password': new_hashed_password,
                'updated_at': datetime.utcnow()
            }}
        )
        
        return jsonify({
            'success': True,
            'message': '–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ'
        })
        
    except Exception as e:
        print(f"Change password error: {e}")
        return jsonify({
            'success': False,
            'error': f'–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

# ==================== PREDICTION ENDPOINTS ====================

@app.route('/predict', methods=['POST'])
def predict():
    """Forex —Å–∏–≥–Ω–∞–ª —Ç–∞–∞–º–∞–≥–ª–∞—Ö"""
    try:
        if model is None or scaler is None:
            return jsonify({
                'success': False,
                'error': '–ú–æ–¥–µ–ª—å –∞—á–∞–∞–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞'
            }), 503
        
        data = request.json
        currency_pair = data.get('currency_pair', '').upper()
        
        if currency_pair not in CURRENCY_PAIRS:
            return jsonify({
                'success': False,
                'error': f'–î—ç–º–∂–∏–≥–¥—ç—Ö –≤–∞–ª—é—Ç: {", ".join(CURRENCY_PAIRS)}'
            }), 400
        
        # ”®–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–∞—Ö (—Ö–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª)
        # TODO: Real-time —ç—Å–≤—ç–ª database-–∞–∞—Å ”©–≥”©–≥–¥”©–ª –∞–≤–∞—Ö
        # –û–¥–æ–æ–≥–æ–æ—Ä demo response
        
        predicted_signal = np.random.randint(0, 5)  # Demo: 0-4 —Å–∏–≥–Ω–∞–ª
        
        return jsonify({
            'success': True,
            'currency_pair': currency_pair,
            'signal': int(predicted_signal),
            'signal_name': get_signal_name(predicted_signal),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"Predict error: {e}")
        return jsonify({
            'success': False,
            'error': f'–¢–∞–∞–º–∞–≥–ª–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}'
        }), 500

@app.route('/currencies', methods=['GET'])
def get_currencies():
    """–î—ç–º–∂–∏–≥–¥—Å—ç–Ω –≤–∞–ª—é—Ç—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç"""
    return jsonify({
        'success': True,
        'currencies': CURRENCY_PAIRS,
        'count': len(CURRENCY_PAIRS)
    })

# ==================== HEALTH CHECK ====================

@app.route('/health', methods=['GET'])
def health():
    """–°–∏—Å—Ç–µ–º —ç—Ä“Ø“Ø–ª —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        # MongoDB —à–∞–ª–≥–∞—Ö
        client.server_info()
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω —Ç–æ–æ
        user_count = users_collection.count_documents({})
        
        return jsonify({
            'status': 'healthy',
            'database': 'connected',
            'users_count': user_count,
            'ml_model': 'loaded' if model else 'not loaded',
            'timestamp': datetime.utcnow().isoformat()
        })
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500

# ==================== MAIN ====================

if __name__ == '__main__':
    # Force port to 5000 to match mobile app configuration
    PORT = 5000
    
    print("=" * 70)
    print("–§–û–†–ï–ö–° –°–ò–ì–ù–ê–õ FULL API")
    print("=" * 70)
    print(f"‚úì MongoDB: {MONGO_URI.split('@')[1] if '@' in MONGO_URI else 'Connected'}")
    print(f"‚úì JWT Authentication: Enabled")
    print(f"‚úì ML Model: {'Loaded' if model else 'Not loaded'}")
    print(f"‚úì Port: {PORT}")
    print(f"\nüöÄ API —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞...")
    print(f"üì° –•–æ–ª–±–æ–≥–¥–æ—Ö —Ö–∞—è–≥: http://localhost:{PORT}")
    print(f"üì± Android Emulator: http://10.0.2.2:{PORT}")
    print(f"üì± Physical Device: http://192.168.1.44:{PORT}")
    print(f"\nüîê Authentication Endpoints:")
    print(f"  POST /auth/register        - –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö")
    print(f"  POST /auth/login           - –ù—ç–≤—Ç—Ä—ç—Ö")
    print(f"  POST /auth/verify          - Token —à–∞–ª–≥–∞—Ö")
    print(f"  GET  /auth/me              - –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª")
    print(f"  PUT  /auth/update          - –ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö")
    print(f"  PUT  /auth/change-password - –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö")
    print(f"\nü§ñ Prediction Endpoints:")
    print(f"  POST /predict              - Forex —Å–∏–≥–Ω–∞–ª —Ç–∞–∞–º–∞–≥–ª–∞—Ö")
    print(f"  GET  /currencies           - –í–∞–ª—é—Ç—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç")
    print(f"\nüìä System:")
    print(f"  GET  /health               - Health check")
    print(f"  GET  /                     - API –º—ç–¥—ç—ç–ª—ç–ª")
    print("\n" + "=" * 70)
    
    app.run(debug=DEBUG_MODE, host=API_HOST, port=PORT)

